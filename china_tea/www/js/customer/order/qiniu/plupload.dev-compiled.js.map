{"version":3,"sources":["plupload.dev.js"],"names":[],"mappings":"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","file":"plupload.dev-compiled.js","sourcesContent":["/**\n * Plupload - multi-runtime File Uploader\n * v2.1.1\n *\n * Copyright 2013, Moxiecode Systems AB\n * Released under GPL License.\n *\n * License: http://www.plupload.com/license\n * Contributing: http://www.plupload.com/contributing\n *\n * Date: 2014-01-16\n */\n/**\n * Plupload.js\n *\n * Copyright 2013, Moxiecode Systems AB\n * Released under GPL License.\n *\n * License: http://www.plupload.com/license\n * Contributing: http://www.plupload.com/contributing\n */\n\n/*global mOxie:true */\n\n;(function(window, o, undef) {\n\nvar delay = window.setTimeout\n, fileFilters = {}\n;\n\n// convert plupload features to caps acceptable by mOxie\nfunction normalizeCaps(settings) {\t\t\n\tvar features = settings.required_features, caps = {};\n\n\tfunction resolve(feature, value, strict) {\n\t\t// Feature notation is deprecated, use caps (this thing here is required for backward compatibility)\n\t\tvar map = { \n\t\t\tchunks: 'slice_blob',\n\t\t\tjpgresize: 'send_binary_string',\n\t\t\tpngresize: 'send_binary_string',\n\t\t\tprogress: 'report_upload_progress',\n\t\t\tmulti_selection: 'select_multiple',\n\t\t\tdragdrop: 'drag_and_drop',\n\t\t\tdrop_element: 'drag_and_drop',\n\t\t\theaders: 'send_custom_headers',\n\t\t\tcanSendBinary: 'send_binary',\n\t\t\ttriggerDialog: 'summon_file_dialog'\n\t\t};\n\n\t\tif (map[feature]) {\n\t\t\tcaps[map[feature]] = value;\n\t\t} else if (!strict) {\n\t\t\tcaps[feature] = value;\n\t\t}\n\t}\n\n\tif (typeof(features) === 'string') {\n\t\tplupload.each(features.split(/\\s*,\\s*/), function(feature) {\n\t\t\tresolve(feature, true);\n\t\t});\n\t} else if (typeof(features) === 'object') {\n\t\tplupload.each(features, function(value, feature) {\n\t\t\tresolve(feature, value);\n\t\t});\n\t} else if (features === true) {\n\t\t// check settings for required features\n\t\tif (!settings.multipart) { // special care for multipart: false\n\t\t\tcaps.send_binary_string = true;\n\t\t}\n\n\t\tif (settings.chunk_size > 0) {\n\t\t\tcaps.slice_blob = true;\n\t\t}\n\n\t\tif (settings.resize.enabled) {\n\t\t\tcaps.send_binary_string = true;\n\t\t}\n\t\t\n\t\tplupload.each(settings, function(value, feature) {\n\t\t\tresolve(feature, !!value, true); // strict check\n\t\t});\n\t}\n\t\n\treturn caps;\n}\n\n/** \n * @module plupload\t\n * @static\n */\nvar plupload = {\n\t/**\n\t * Plupload version will be replaced on build.\n\t *\n\t * @property VERSION\n\t * @for Plupload\n\t * @static\n\t * @final\n\t */\n\tVERSION : '2.1.1',\n\n\t/**\n\t * Inital state of the queue and also the state ones it's finished all it's uploads.\n\t *\n\t * @property STOPPED\n\t * @static\n\t * @final\n\t */\n\tSTOPPED : 1,\n\n\t/**\n\t * Upload process is running\n\t *\n\t * @property STARTED\n\t * @static\n\t * @final\n\t */\n\tSTARTED : 2,\n\n\t/**\n\t * File is queued for upload\n\t *\n\t * @property QUEUED\n\t * @static\n\t * @final\n\t */\n\tQUEUED : 1,\n\n\t/**\n\t * File is being uploaded\n\t *\n\t * @property UPLOADING\n\t * @static\n\t * @final\n\t */\n\tUPLOADING : 2,\n\n\t/**\n\t * File has failed to be uploaded\n\t *\n\t * @property FAILED\n\t * @static\n\t * @final\n\t */\n\tFAILED : 4,\n\n\t/**\n\t * File has been uploaded successfully\n\t *\n\t * @property DONE\n\t * @static\n\t * @final\n\t */\n\tDONE : 5,\n\n\t// Error constants used by the Error event\n\n\t/**\n\t * Generic error for example if an exception is thrown inside Silverlight.\n\t *\n\t * @property GENERIC_ERROR\n\t * @static\n\t * @final\n\t */\n\tGENERIC_ERROR : -100,\n\n\t/**\n\t * HTTP transport error. For example if the server produces a HTTP status other than 200.\n\t *\n\t * @property HTTP_ERROR\n\t * @static\n\t * @final\n\t */\n\tHTTP_ERROR : -200,\n\n\t/**\n\t * Generic I/O error. For exampe if it wasn't possible to open the file stream on local machine.\n\t *\n\t * @property IO_ERROR\n\t * @static\n\t * @final\n\t */\n\tIO_ERROR : -300,\n\n\t/**\n\t * Generic I/O error. For exampe if it wasn't possible to open the file stream on local machine.\n\t *\n\t * @property SECURITY_ERROR\n\t * @static\n\t * @final\n\t */\n\tSECURITY_ERROR : -400,\n\n\t/**\n\t * Initialization error. Will be triggered if no runtime was initialized.\n\t *\n\t * @property INIT_ERROR\n\t * @static\n\t * @final\n\t */\n\tINIT_ERROR : -500,\n\n\t/**\n\t * File size error. If the user selects a file that is too large it will be blocked and an error of this type will be triggered.\n\t *\n\t * @property FILE_SIZE_ERROR\n\t * @static\n\t * @final\n\t */\n\tFILE_SIZE_ERROR : -600,\n\n\t/**\n\t * File extension error. If the user selects a file that isn't valid according to the filters setting.\n\t *\n\t * @property FILE_EXTENSION_ERROR\n\t * @static\n\t * @final\n\t */\n\tFILE_EXTENSION_ERROR : -601,\n\n\t/**\n\t * Duplicate file error. If prevent_duplicates is set to true and user selects the same file again.\n\t *\n\t * @property FILE_DUPLICATE_ERROR\n\t * @static\n\t * @final\n\t */\n\tFILE_DUPLICATE_ERROR : -602,\n\n\t/**\n\t * Runtime will try to detect if image is proper one. Otherwise will throw this error.\n\t *\n\t * @property IMAGE_FORMAT_ERROR\n\t * @static\n\t * @final\n\t */\n\tIMAGE_FORMAT_ERROR : -700,\n\n\t/**\n\t * While working on the image runtime will try to detect if the operation may potentially run out of memeory and will throw this error.\n\t *\n\t * @property IMAGE_MEMORY_ERROR\n\t * @static\n\t * @final\n\t */\n\tIMAGE_MEMORY_ERROR : -701,\n\n\t/**\n\t * Each runtime has an upper limit on a dimension of the image it can handle. If bigger, will throw this error.\n\t *\n\t * @property IMAGE_DIMENSIONS_ERROR\n\t * @static\n\t * @final\n\t */\n\tIMAGE_DIMENSIONS_ERROR : -702,\n\n\t/**\n\t * Mime type lookup table.\n\t *\n\t * @property mimeTypes\n\t * @type Object\n\t * @final\n\t */\n\tmimeTypes : o.mimes,\n\n\t/**\n\t * In some cases sniffing is the only way around :(\n\t */\n\tua: o.ua,\n\n\t/**\n\t * Gets the true type of the built-in object (better version of typeof).\n\t * @credits Angus Croll (http://javascriptweblog.wordpress.com/)\n\t *\n\t * @method typeOf\n\t * @static\n\t * @param {Object} o Object to check.\n\t * @return {String} Object [[Class]]\n\t */\n\ttypeOf: o.typeOf,\n\n\t/**\n\t * Extends the specified object with another object.\n\t *\n\t * @method extend\n\t * @static\n\t * @param {Object} target Object to extend.\n\t * @param {Object..} obj Multiple objects to extend with.\n\t * @return {Object} Same as target, the extended object.\n\t */\n\textend : o.extend,\n\n\t/**\n\t * Generates an unique ID. This is 99.99% unique since it takes the current time and 5 random numbers.\n\t * The only way a user would be able to get the same ID is if the two persons at the same exact milisecond manages\n\t * to get 5 the same random numbers between 0-65535 it also uses a counter so each call will be guaranteed to be page unique.\n\t * It's more probable for the earth to be hit with an ansteriod. You can also if you want to be 100% sure set the plupload.guidPrefix property\n\t * to an user unique key.\n\t *\n\t * @method guid\n\t * @static\n\t * @return {String} Virtually unique id.\n\t */\n\tguid : o.guid,\n\n\t/**\n\t * Get array of DOM Elements by their ids.\n\t * \n\t * @method get\n\t * @for Utils\n\t * @param {String} id Identifier of the DOM Element\n\t * @return {Array}\n\t*/\n\tget : function get(ids) {\n\t\tvar els = [], el;\n\n\t\tif (o.typeOf(ids) !== 'array') {\n\t\t\tids = [ids];\n\t\t}\n\n\t\tvar i = ids.length;\n\t\twhile (i--) {\n\t\t\tel = o.get(ids[i]);\n\t\t\tif (el) {\n\t\t\t\tels.push(el);\n\t\t\t}\n\t\t}\n\n\t\treturn els.length ? els : null;\n\t},\n\n\t/**\n\t * Executes the callback function for each item in array/object. If you return false in the\n\t * callback it will break the loop.\n\t *\n\t * @method each\n\t * @static\n\t * @param {Object} obj Object to iterate.\n\t * @param {function} callback Callback function to execute for each item.\n\t */\n\teach : o.each,\n\n\t/**\n\t * Returns the absolute x, y position of an Element. The position will be returned in a object with x, y fields.\n\t *\n\t * @method getPos\n\t * @static\n\t * @param {Element} node HTML element or element id to get x, y position from.\n\t * @param {Element} root Optional root element to stop calculations at.\n\t * @return {object} Absolute position of the specified element object with x, y fields.\n\t */\n\tgetPos : o.getPos,\n\n\t/**\n\t * Returns the size of the specified node in pixels.\n\t *\n\t * @method getSize\n\t * @static\n\t * @param {Node} node Node to get the size of.\n\t * @return {Object} Object with a w and h property.\n\t */\n\tgetSize : o.getSize,\n\n\t/**\n\t * Encodes the specified string.\n\t *\n\t * @method xmlEncode\n\t * @static\n\t * @param {String} s String to encode.\n\t * @return {String} Encoded string.\n\t */\n\txmlEncode : function(str) {\n\t\tvar xmlEncodeChars = {'<' : 'lt', '>' : 'gt', '&' : 'amp', '\"' : 'quot', '\\'' : '#39'}, xmlEncodeRegExp = /[<>&\\\"\\']/g;\n\n\t\treturn str ? ('' + str).replace(xmlEncodeRegExp, function(chr) {\n\t\t\treturn xmlEncodeChars[chr] ? '&' + xmlEncodeChars[chr] + ';' : chr;\n\t\t}) : str;\n\t},\n\n\t/**\n\t * Forces anything into an array.\n\t *\n\t * @method toArray\n\t * @static\n\t * @param {Object} obj Object with length field.\n\t * @return {Array} Array object containing all items.\n\t */\n\ttoArray : o.toArray,\n\n\t/**\n\t * Find an element in array and return it's index if present, otherwise return -1.\n\t *\n\t * @method inArray\n\t * @static\n\t * @param {mixed} needle Element to find\n\t * @param {Array} array\n\t * @return {Int} Index of the element, or -1 if not found\n\t */\n\tinArray : o.inArray,\n\n\t/**\n\t * Extends the language pack object with new items.\n\t *\n\t * @method addI18n\n\t * @static\n\t * @param {Object} pack Language pack items to add.\n\t * @return {Object} Extended language pack object.\n\t */\n\taddI18n : o.addI18n,\n\n\t/**\n\t * Translates the specified string by checking for the english string in the language pack lookup.\n\t *\n\t * @method translate\n\t * @static\n\t * @param {String} str String to look for.\n\t * @return {String} Translated string or the input string if it wasn't found.\n\t */\n\ttranslate : o.translate,\n\n\t/**\n\t * Checks if object is empty.\n\t *\n\t * @method isEmptyObj\n\t * @static\n\t * @param {Object} obj Object to check.\n\t * @return {Boolean}\n\t */\n\tisEmptyObj : o.isEmptyObj,\n\n\t/**\n\t * Checks if specified DOM element has specified class.\n\t *\n\t * @method hasClass\n\t * @static\n\t * @param {Object} obj DOM element like object to add handler to.\n\t * @param {String} name Class name\n\t */\n\thasClass : o.hasClass,\n\n\t/**\n\t * Adds specified className to specified DOM element.\n\t *\n\t * @method addClass\n\t * @static\n\t * @param {Object} obj DOM element like object to add handler to.\n\t * @param {String} name Class name\n\t */\n\taddClass : o.addClass,\n\n\t/**\n\t * Removes specified className from specified DOM element.\n\t *\n\t * @method removeClass\n\t * @static\n\t * @param {Object} obj DOM element like object to add handler to.\n\t * @param {String} name Class name\n\t */\n\tremoveClass : o.removeClass,\n\n\t/**\n\t * Returns a given computed style of a DOM element.\n\t *\n\t * @method getStyle\n\t * @static\n\t * @param {Object} obj DOM element like object.\n\t * @param {String} name Style you want to get from the DOM element\n\t */\n\tgetStyle : o.getStyle,\n\n\t/**\n\t * Adds an event handler to the specified object and store reference to the handler\n\t * in objects internal Plupload registry (@see removeEvent).\n\t *\n\t * @method addEvent\n\t * @static\n\t * @param {Object} obj DOM element like object to add handler to.\n\t * @param {String} name Name to add event listener to.\n\t * @param {Function} callback Function to call when event occurs.\n\t * @param {String} (optional) key that might be used to add specifity to the event record.\n\t */\n\taddEvent : o.addEvent,\n\n\t/**\n\t * Remove event handler from the specified object. If third argument (callback)\n\t * is not specified remove all events with the specified name.\n\t *\n\t * @method removeEvent\n\t * @static\n\t * @param {Object} obj DOM element to remove event listener(s) from.\n\t * @param {String} name Name of event listener to remove.\n\t * @param {Function|String} (optional) might be a callback or unique key to match.\n\t */\n\tremoveEvent: o.removeEvent,\n\n\t/**\n\t * Remove all kind of events from the specified object\n\t *\n\t * @method removeAllEvents\n\t * @static\n\t * @param {Object} obj DOM element to remove event listeners from.\n\t * @param {String} (optional) unique key to match, when removing events.\n\t */\n\tremoveAllEvents: o.removeAllEvents,\n\n\t/**\n\t * Cleans the specified name from national characters (diacritics). The result will be a name with only a-z, 0-9 and _.\n\t *\n\t * @method cleanName\n\t * @static\n\t * @param {String} s String to clean up.\n\t * @return {String} Cleaned string.\n\t */\n\tcleanName : function(name) {\n\t\tvar i, lookup;\n\n\t\t// Replace diacritics\n\t\tlookup = [\n\t\t\t/[\\300-\\306]/g, 'A', /[\\340-\\346]/g, 'a',\n\t\t\t/\\307/g, 'C', /\\347/g, 'c',\n\t\t\t/[\\310-\\313]/g, 'E', /[\\350-\\353]/g, 'e',\n\t\t\t/[\\314-\\317]/g, 'I', /[\\354-\\357]/g, 'i',\n\t\t\t/\\321/g, 'N', /\\361/g, 'n',\n\t\t\t/[\\322-\\330]/g, 'O', /[\\362-\\370]/g, 'o',\n\t\t\t/[\\331-\\334]/g, 'U', /[\\371-\\374]/g, 'u'\n\t\t];\n\n\t\tfor (i = 0; i < lookup.length; i += 2) {\n\t\t\tname = name.replace(lookup[i], lookup[i + 1]);\n\t\t}\n\n\t\t// Replace whitespace\n\t\tname = name.replace(/\\s+/g, '_');\n\n\t\t// Remove anything else\n\t\tname = name.replace(/[^a-z0-9_\\-\\.]+/gi, '');\n\n\t\treturn name;\n\t},\n\n\t/**\n\t * Builds a full url out of a base URL and an object with items to append as query string items.\n\t *\n\t * @method buildUrl\n\t * @static\n\t * @param {String} url Base URL to append query string items to.\n\t * @param {Object} items Name/value object to serialize as a querystring.\n\t * @return {String} String with url + serialized query string items.\n\t */\n\tbuildUrl : function(url, items) {\n\t\tvar query = '';\n\n\t\tplupload.each(items, function(value, name) {\n\t\t\tquery += (query ? '&' : '') + encodeURIComponent(name) + '=' + encodeURIComponent(value);\n\t\t});\n\n\t\tif (query) {\n\t\t\turl += (url.indexOf('?') > 0 ? '&' : '?') + query;\n\t\t}\n\n\t\treturn url;\n\t},\n\n\t/**\n\t * Formats the specified number as a size string for example 1024 becomes 1 KB.\n\t *\n\t * @method formatSize\n\t * @static\n\t * @param {Number} size Size to format as string.\n\t * @return {String} Formatted size string.\n\t */\n\tformatSize : function(size) {\n\n\t\tif (size === undef || /\\D/.test(size)) {\n\t\t\treturn plupload.translate('N/A');\n\t\t}\n\n\t\tfunction round(num, precision) {\n\t\t\treturn Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision);\n\t\t}\n\n\t\tvar boundary = Math.pow(1024, 4);\n\n\t\t// TB\n\t\tif (size > boundary) {\n\t\t\treturn round(size / boundary, 1) + \" \" + plupload.translate('tb');\n\t\t}\n\n\t\t// GB\n\t\tif (size > (boundary/=1024)) {\n\t\t\treturn round(size / boundary, 1) + \" \" + plupload.translate('gb');\n\t\t}\n\n\t\t// MB\n\t\tif (size > (boundary/=1024)) {\n\t\t\treturn round(size / boundary, 1) + \" \" + plupload.translate('mb');\n\t\t}\n\n\t\t// KB\n\t\tif (size > 1024) {\n\t\t\treturn Math.round(size / 1024) + \" \" + plupload.translate('kb');\n\t\t}\n\n\t\treturn size + \" \" + plupload.translate('b');\n\t},\n\n\n\t/**\n\t * Parses the specified size string into a byte value. For example 10kb becomes 10240.\n\t *\n\t * @method parseSize\n\t * @static\n\t * @param {String|Number} size String to parse or number to just pass through.\n\t * @return {Number} Size in bytes.\n\t */\n\tparseSize : o.parseSizeStr,\n\n\n\t/**\n\t * A way to predict what runtime will be choosen in the current environment with the\n\t * specified settings.\n\t *\n\t * @method predictRuntime\n\t * @static\n\t * @param {Object|String} config Plupload settings to check\n\t * @param {String} [runtimes] Comma-separated list of runtimes to check against\n\t * @return {String} Type of compatible runtime\n\t */\n\tpredictRuntime : function(config, runtimes) {\n\t\tvar up, runtime;\n\n\t\tup = new plupload.Uploader(config);\n\t\truntime = o.Runtime.thatCan(up.getOption().required_features, runtimes || config.runtimes);\n\t\tup.destroy();\n\t\treturn runtime;\n\t},\n\n\t/**\n\t * Registers a filter that will be executed for each file added to the queue.\n\t * If callback returns false, file will not be added.\n\t *\n\t * Callback receives two arguments: a value for the filter as it was specified in settings.filters\n\t * and a file to be filtered. Callback is executed in the context of uploader instance.\n\t *\n\t * @method addFileFilter\n\t * @static\n\t * @param {String} name Name of the filter by which it can be referenced in settings.filters\n\t * @param {String} cb Callback - the actual routine that every added file must pass\n\t */\n\taddFileFilter: function(name, cb) {\n\t\tfileFilters[name] = cb;\n\t}\n};\n\n\nplupload.addFileFilter('mime_types', function(filters, file, cb) {\n\tif (filters.length && !filters.regexp.test(file.name)) {\n\t\tthis.trigger('Error', {\n\t\t\tcode : plupload.FILE_EXTENSION_ERROR,\n\t\t\tmessage : plupload.translate('File extension error.'),\n\t\t\tfile : file\n\t\t});\n\t\tcb(false);\n\t} else {\n\t\tcb(true);\n\t}\n});\n\n\nplupload.addFileFilter('max_file_size', function(maxSize, file, cb) {\n\tvar undef;\n\n\tmaxSize = plupload.parseSize(maxSize);\n\n\t// Invalid file size\n\tif (file.size !== undef && maxSize && file.size > maxSize) {\n\t\tthis.trigger('Error', {\n\t\t\tcode : plupload.FILE_SIZE_ERROR,\n\t\t\tmessage : plupload.translate('File size error.'),\n\t\t\tfile : file\n\t\t});\n\t\tcb(false);\n\t} else {\n\t\tcb(true);\n\t}\n});\n\n\nplupload.addFileFilter('prevent_duplicates', function(value, file, cb) {\n\tif (value) {\n\t\tvar ii = this.files.length;\n\t\twhile (ii--) {\n\t\t\t// Compare by name and size (size might be 0 or undefined, but still equivalent for both)\n\t\t\tif (file.name === this.files[ii].name && file.size === this.files[ii].size) {\n\t\t\t\tthis.trigger('Error', {\n\t\t\t\t\tcode : plupload.FILE_DUPLICATE_ERROR,\n\t\t\t\t\tmessage : plupload.translate('Duplicate file error.'),\n\t\t\t\t\tfile : file\n\t\t\t\t});\n\t\t\t\tcb(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tcb(true);\n});\n\n\n/**\n@class Uploader\n@constructor\n\n@param {Object} settings For detailed information about each option check documentation.\n\t@param {String|DOMElement} settings.browse_button id of the DOM element or DOM element itself to use as file dialog trigger.\n\t@param {String} settings.url URL of the server-side upload handler.\n\t@param {Number|String} [settings.chunk_size=0] Chunk size in bytes to slice the file into. Shorcuts with b, kb, mb, gb, tb suffixes also supported. `e.g. 204800 or \"204800b\" or \"200kb\"`. By default - disabled.\n\t@param {String} [settings.container] id of the DOM element to use as a container for uploader structures. Defaults to document.body.\n\t@param {String|DOMElement} [settings.drop_element] id of the DOM element or DOM element itself to use as a drop zone for Drag-n-Drop.\n\t@param {String} [settings.file_data_name=\"file\"] Name for the file field in Multipart formated message.\n\t@param {Object} [settings.filters={}] Set of file type filters.\n\t\t@param {Array} [settings.filters.mime_types=[]] List of file types to accept, each one defined by title and list of extensions. `e.g. {title : \"Image files\", extensions : \"jpg,jpeg,gif,png\"}`. Dispatches `plupload.FILE_EXTENSION_ERROR`\n\t\t@param {String|Number} [settings.filters.max_file_size=0] Maximum file size that the user can pick, in bytes. Optionally supports b, kb, mb, gb, tb suffixes. `e.g. \"10mb\" or \"1gb\"`. By default - not set. Dispatches `plupload.FILE_SIZE_ERROR`.\n\t\t@param {Boolean} [settings.filters.prevent_duplicates=false] Do not let duplicates into the queue. Dispatches `plupload.FILE_DUPLICATE_ERROR`.\n\t@param {String} [settings.flash_swf_url] URL of the Flash swf.\n\t@param {Object} [settings.headers] Custom headers to send with the upload. Hash of name/value pairs.\n\t@param {Number} [settings.max_retries=0] How many times to retry the chunk or file, before triggering Error event.\n\t@param {Boolean} [settings.multipart=true] Whether to send file and additional parameters as Multipart formated message.\n\t@param {Object} [settings.multipart_params] Hash of key/value pairs to send with every file upload.\n\t@param {Boolean} [settings.multi_selection=true] Enable ability to select multiple files at once in file dialog.\n\t@param {String|Object} [settings.required_features] Either comma-separated list or hash of required features that chosen runtime should absolutely possess.\n\t@param {Object} [settings.resize] Enable resizng of images on client-side. Applies to `image/jpeg` and `image/png` only. `e.g. {width : 200, height : 200, quality : 90, crop: true}`\n\t\t@param {Number} [settings.resize.width] If image is bigger, it will be resized.\n\t\t@param {Number} [settings.resize.height] If image is bigger, it will be resized.\n\t\t@param {Number} [settings.resize.quality=90] Compression quality for jpegs (1-100).\n\t\t@param {Boolean} [settings.resize.crop=false] Whether to crop images to exact dimensions. By default they will be resized proportionally.\n\t@param {String} [settings.runtimes=\"html5,flash,silverlight,html4\"] Comma separated list of runtimes, that Plupload will try in turn, moving to the next if previous fails.\n\t@param {String} [settings.silverlight_xap_url] URL of the Silverlight xap.\n\t@param {Boolean} [settings.unique_names=false] If true will generate unique filenames for uploaded files.\n*/\nplupload.Uploader = function(options) {\n\t/**\n\t * Fires when the current RunTime has been initialized.\n\t *\n\t * @event Init\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\n\t/**\n\t * Fires after the init event incase you need to perform actions there.\n\t *\n\t * @event PostInit\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\n\t/**\n\t * Fires when the option is changed in via uploader.setOption().\n\t *\n\t * @event OptionChanged\n\t * @since 2.1\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {String} name Name of the option that was changed\n\t * @param {Mixed} value New value for the specified option\n\t * @param {Mixed} oldValue Previous value of the option\n\t */\n\n\t/**\n\t * Fires when the silverlight/flash or other shim needs to move.\n\t *\n\t * @event Refresh\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\n\t/**\n\t * Fires when the overall state is being changed for the upload queue.\n\t *\n\t * @event StateChanged\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\n\t/**\n\t * Fires when a file is to be uploaded by the runtime.\n\t *\n\t * @event UploadFile\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {plupload.File} file File to be uploaded.\n\t */\n\n\t/**\n\t * Fires when just before a file is uploaded. This event enables you to override settings\n\t * on the uploader instance before the file is uploaded.\n\t *\n\t * @event BeforeUpload\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {plupload.File} file File to be uploaded.\n\t */\n\n\t/**\n\t * Fires when the file queue is changed. In other words when files are added/removed to the files array of the uploader instance.\n\t *\n\t * @event QueueChanged\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\n\t/**\n\t * Fires while a file is being uploaded. Use this event to update the current file upload progress.\n\t *\n\t * @event UploadProgress\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {plupload.File} file File that is currently being uploaded.\n\t */\n\n\t/**\n\t * Fires when file is removed from the queue.\n\t *\n\t * @event FilesRemoved\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {Array} files Array of files that got removed.\n\t */\n\n\t/**\n\t * Fires for every filtered file before it is added to the queue.\n\t * \n\t * @event FileFiltered\n\t * @since 2.1\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {plupload.File} file Another file that has to be added to the queue.\n\t */\n\n\t/**\n\t * Fires after files were filtered and added to the queue.\n\t *\n\t * @event FilesAdded\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {Array} files Array of file objects that were added to queue by the user.\n\t */\n\n\t/**\n\t * Fires when a file is successfully uploaded.\n\t *\n\t * @event FileUploaded\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {plupload.File} file File that was uploaded.\n\t * @param {Object} response Object with response properties.\n\t */\n\n\t/**\n\t * Fires when file chunk is uploaded.\n\t *\n\t * @event ChunkUploaded\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {plupload.File} file File that the chunk was uploaded for.\n\t * @param {Object} response Object with response properties.\n\t */\n\n\t/**\n\t * Fires when all files in a queue are uploaded.\n\t *\n\t * @event UploadComplete\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {Array} files Array of file objects that was added to queue/selected by the user.\n\t */\n\n\t/**\n\t * Fires when a error occurs.\n\t *\n\t * @event Error\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t * @param {Object} error Contains code, message and sometimes file and other details.\n\t */\n\n\t/**\n\t * Fires when destroy method is called.\n\t *\n\t * @event Destroy\n\t * @param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\tvar uid = plupload.guid()\n\t, settings\n\t, files = []\n\t, preferred_caps = {}\n\t, fileInputs = []\n\t, fileDrops = []\n\t, startTime\n\t, total\n\t, disabled = false\n\t, xhr\n\t;\n\n\n\t// Private methods\n\tfunction uploadNext() {\n\t\tvar file, count = 0, i;\n\n\t\tif (this.state == plupload.STARTED) {\n\t\t\t// Find first QUEUED file\n\t\t\tfor (i = 0; i < files.length; i++) {\n\t\t\t\tif (!file && files[i].status == plupload.QUEUED) {\n\t\t\t\t\tfile = files[i];\n\t\t\t\t\tif (this.trigger(\"BeforeUpload\", file)) {\n\t\t\t\t\t\tfile.status = plupload.UPLOADING;\n\t\t\t\t\t\tthis.trigger(\"UploadFile\", file);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// All files are DONE or FAILED\n\t\t\tif (count == files.length) {\n\t\t\t\tif (this.state !== plupload.STOPPED) {\n\t\t\t\t\tthis.state = plupload.STOPPED;\n\t\t\t\t\tthis.trigger(\"StateChanged\");\n\t\t\t\t}\n\t\t\t\tthis.trigger(\"UploadComplete\", files);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction calcFile(file) {\n\t\tfile.percent = file.size > 0 ? Math.ceil(file.loaded / file.size * 100) : 100;\n\t\tcalc();\n\t}\n\n\n\tfunction calc() {\n\t\tvar i, file;\n\n\t\t// Reset stats\n\t\ttotal.reset();\n\n\t\t// Check status, size, loaded etc on all files\n\t\tfor (i = 0; i < files.length; i++) {\n\t\t\tfile = files[i];\n\n\t\t\tif (file.size !== undef) {\n\t\t\t\t// We calculate totals based on original file size\n\t\t\t\ttotal.size += file.origSize;\n\n\t\t\t\t// Since we cannot predict file size after resize, we do opposite and\n\t\t\t\t// interpolate loaded amount to match magnitude of total\n\t\t\t\ttotal.loaded += file.loaded * file.origSize / file.size;\n\t\t\t} else {\n\t\t\t\ttotal.size = undef;\n\t\t\t}\n\n\t\t\tif (file.status == plupload.DONE) {\n\t\t\t\ttotal.uploaded++;\n\t\t\t} else if (file.status == plupload.FAILED) {\n\t\t\t\ttotal.failed++;\n\t\t\t} else {\n\t\t\t\ttotal.queued++;\n\t\t\t}\n\t\t}\n\n\t\t// If we couldn't calculate a total file size then use the number of files to calc percent\n\t\tif (total.size === undef) {\n\t\t\ttotal.percent = files.length > 0 ? Math.ceil(total.uploaded / files.length * 100) : 0;\n\t\t} else {\n\t\t\ttotal.bytesPerSec = Math.ceil(total.loaded / ((+new Date() - startTime || 1) / 1000.0));\n\t\t\ttotal.percent = total.size > 0 ? Math.ceil(total.loaded / total.size * 100) : 0;\n\t\t}\n\t}\n\n\n\tfunction getRUID() {\n\t\tvar ctrl = fileInputs[0] || fileDrops[0];\n\t\tif (ctrl) {\n\t\t\treturn ctrl.getRuntime().uid;\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tfunction runtimeCan(file, cap) {\n\t\tif (file.ruid) {\n\t\t\tvar info = o.Runtime.getInfo(file.ruid);\n\t\t\tif (info) {\n\t\t\t\treturn info.can(cap);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tfunction bindEventListeners() {\n\t\tthis.bind('FilesAdded', onFilesAdded);\n\n\t\tthis.bind('CancelUpload', onCancelUpload);\n\t\t\n\t\tthis.bind('BeforeUpload', onBeforeUpload);\n\n\t\tthis.bind('UploadFile', onUploadFile);\n\n\t\tthis.bind('UploadProgress', onUploadProgress);\n\n\t\tthis.bind('StateChanged', onStateChanged);\n\n\t\tthis.bind('QueueChanged', calc);\n\n\t\tthis.bind('Error', onError);\n\n\t\tthis.bind('FileUploaded', onFileUploaded);\n\n\t\tthis.bind('Destroy', onDestroy);\n\t}\n\n\n\tfunction initControls(settings, cb) {\n\t\tvar self = this, inited = 0, queue = [];\n\n\t\t// common settings\n\t\tvar options = {\n\t\t\taccept: settings.filters.mime_types,\n\t\t\truntime_order: settings.runtimes,\n\t\t\trequired_caps: settings.required_features,\n\t\t\tpreferred_caps: preferred_caps,\n\t\t\tswf_url: settings.flash_swf_url,\n\t\t\txap_url: settings.silverlight_xap_url\n\t\t};\n\n\t\t// add runtime specific options if any\n\t\tplupload.each(settings.runtimes.split(/\\s*,\\s*/), function(runtime) {\n\t\t\tif (settings[runtime]) {\n\t\t\t\toptions[runtime] = settings[runtime];\n\t\t\t}\n\t\t});\n\n\t\t// initialize file pickers - there can be many\n\t\tif (settings.browse_button) {\n\t\t\tplupload.each(settings.browse_button, function(el) {\n\t\t\t\tqueue.push(function(cb) {\n\t\t\t\t\tvar fileInput = new o.FileInput(plupload.extend({}, options, {\n\t\t\t\t\t\tname: settings.file_data_name,\n\t\t\t\t\t\tmultiple: settings.multi_selection,\n\t\t\t\t\t\tcontainer: settings.container,\n\t\t\t\t\t\tbrowse_button: el\n\t\t\t\t\t}));\n\n\t\t\t\t\tfileInput.onready = function() {\n\t\t\t\t\t\tvar info = o.Runtime.getInfo(this.ruid);\n\n\t\t\t\t\t\t// for backward compatibility\n\t\t\t\t\t\to.extend(self.features, {\n\t\t\t\t\t\t\tchunks: info.can('slice_blob'),\n\t\t\t\t\t\t\tmultipart: info.can('send_multipart'),\n\t\t\t\t\t\t\tmulti_selection: info.can('select_multiple')\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tinited++;\n\t\t\t\t\t\tfileInputs.push(this);\n\t\t\t\t\t\tcb();\n\t\t\t\t\t};\n\n\t\t\t\t\tfileInput.onchange = function() {\n\t\t\t\t\t\tself.addFile(this.files);\n\t\t\t\t\t};\n\n\t\t\t\t\tfileInput.bind('mouseenter mouseleave mousedown mouseup', function(e) {\n\t\t\t\t\t\tif (!disabled) {\n\t\t\t\t\t\t\tif (settings.browse_button_hover) {\n\t\t\t\t\t\t\t\tif ('mouseenter' === e.type) {\n\t\t\t\t\t\t\t\t\to.addClass(el, settings.browse_button_hover);\n\t\t\t\t\t\t\t\t} else if ('mouseleave' === e.type) {\n\t\t\t\t\t\t\t\t\to.removeClass(el, settings.browse_button_hover);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (settings.browse_button_active) {\n\t\t\t\t\t\t\t\tif ('mousedown' === e.type) {\n\t\t\t\t\t\t\t\t\to.addClass(el, settings.browse_button_active);\n\t\t\t\t\t\t\t\t} else if ('mouseup' === e.type) {\n\t\t\t\t\t\t\t\t\to.removeClass(el, settings.browse_button_active);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tfileInput.bind('error runtimeerror', function() {\n\t\t\t\t\t\tfileInput = null;\n\t\t\t\t\t\tcb();\n\t\t\t\t\t});\n\n\t\t\t\t\tfileInput.init();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// initialize drop zones\n\t\tif (settings.drop_element) {\n\t\t\tplupload.each(settings.drop_element, function(el) {\n\t\t\t\tqueue.push(function(cb) {\n\t\t\t\t\tvar fileDrop = new o.FileDrop(plupload.extend({}, options, {\n\t\t\t\t\t\tdrop_zone: el\n\t\t\t\t\t}));\n\n\t\t\t\t\tfileDrop.onready = function() {\n\t\t\t\t\t\tvar info = o.Runtime.getInfo(this.ruid);\n\n\t\t\t\t\t\tself.features.dragdrop = info.can('drag_and_drop'); // for backward compatibility\n\n\t\t\t\t\t\tinited++;\n\t\t\t\t\t\tfileDrops.push(this);\n\t\t\t\t\t\tcb();\n\t\t\t\t\t};\n\n\t\t\t\t\tfileDrop.ondrop = function() {\n\t\t\t\t\t\tself.addFile(this.files);\n\t\t\t\t\t};\n\n\t\t\t\t\tfileDrop.bind('error runtimeerror', function() {\n\t\t\t\t\t\tfileDrop = null;\n\t\t\t\t\t\tcb();\n\t\t\t\t\t});\n\n\t\t\t\t\tfileDrop.init();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\n\t\to.inSeries(queue, function() {\n\t\t\tif (typeof(cb) === 'function') {\n\t\t\t\tcb(inited);\n\t\t\t}\n\t\t});\n\t}\n\n\n\tfunction resizeImage(blob, params, cb) {\n\t\tvar img = new o.Image();\n\n\t\ttry {\n\t\t\timg.onload = function() {\n\t\t\t\timg.downsize(params.width, params.height, params.crop, params.preserve_headers);\n\t\t\t};\n\n\t\t\timg.onresize = function() {\n\t\t\t\tcb(this.getAsBlob(blob.type, params.quality));\n\t\t\t\tthis.destroy();\n\t\t\t};\n\n\t\t\timg.onerror = function() {\n\t\t\t\tcb(blob);\n\t\t\t};\n\n\t\t\timg.load(blob);\n\t\t} catch(ex) {\n\t\t\tcb(blob);\n\t\t}\n\t}\n\n\n\tfunction setOption(option, value, init) {\n\t\tvar self = this, reinitRequired = false;\n\n\t\tfunction _setOption(option, value, init) {\n\t\t\tvar oldValue = settings[option];\n\n\t\t\tswitch (option) {\n\t\t\t\tcase 'max_file_size':\n\t\t\t\t\tif (option === 'max_file_size') {\n\t\t\t\t\t\tsettings.max_file_size = settings.filters.max_file_size = value;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'chunk_size':\n\t\t\t\t\tif (value = plupload.parseSize(value)) {\n\t\t\t\t\t\tsettings[option] = value;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'filters':\n\t\t\t\t\t// for sake of backward compatibility\n\t\t\t\t\tif (plupload.typeOf(value) === 'array') {\n\t\t\t\t\t\tvalue = {\n\t\t\t\t\t\t\tmime_types: value\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (init) {\n\t\t\t\t\t\tplupload.extend(settings.filters, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsettings.filters = value;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if file format filters are being updated, regenerate the matching expressions\n\t\t\t\t\tif (value.mime_types) {\n\t\t\t\t\t\tsettings.filters.mime_types.regexp = (function(filters) {\n\t\t\t\t\t\t\tvar extensionsRegExp = [];\n\n\t\t\t\t\t\t\tplupload.each(filters, function(filter) {\n\t\t\t\t\t\t\t\tplupload.each(filter.extensions.split(/,/), function(ext) {\n\t\t\t\t\t\t\t\t\tif (/^\\s*\\*\\s*$/.test(ext)) {\n\t\t\t\t\t\t\t\t\t\textensionsRegExp.push('\\\\.*');\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\textensionsRegExp.push('\\\\.' + ext.replace(new RegExp('[' + ('/^$.*+?|()[]{}\\\\'.replace(/./g, '\\\\$&')) + ']', 'g'), '\\\\$&'));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn new RegExp('(' + extensionsRegExp.join('|') + ')$', 'i');\n\t\t\t\t\t\t}(settings.filters.mime_types));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'resize':\n\t\t\t\t\tif (init) {\n\t\t\t\t\t\tplupload.extend(settings.resize, value, {\n\t\t\t\t\t\t\tenabled: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsettings.resize = value;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'prevent_duplicates':\n\t\t\t\t\tsettings.prevent_duplicates = settings.filters.prevent_duplicates = !!value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'browse_button':\n\t\t\t\tcase 'drop_element':\n\t\t\t\t\t\tvalue = plupload.get(value);\n\n\t\t\t\tcase 'container':\n\t\t\t\tcase 'runtimes':\n\t\t\t\tcase 'multi_selection':\n\t\t\t\tcase 'flash_swf_url':\n\t\t\t\tcase 'silverlight_xap_url':\n\t\t\t\t\tsettings[option] = value;\n\t\t\t\t\tif (!init) {\n\t\t\t\t\t\treinitRequired = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tsettings[option] = value;\n\t\t\t}\n\n\t\t\tif (!init) {\n\t\t\t\tself.trigger('OptionChanged', option, value, oldValue);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(option) === 'object') {\n\t\t\tplupload.each(option, function(value, option) {\n\t\t\t\t_setOption(option, value, init);\n\t\t\t});\n\t\t} else {\n\t\t\t_setOption(option, value, init);\n\t\t}\n\n\t\tif (init) {\n\t\t\t// Normalize the list of required capabilities\n\t\t\tsettings.required_features = normalizeCaps(plupload.extend({}, settings));\n\n\t\t\t// Come up with the list of capabilities that can affect default mode in a multi-mode runtimes\n\t\t\tpreferred_caps = normalizeCaps(plupload.extend({}, settings, {\n\t\t\t\trequired_features: true\n\t\t\t}));\n\t\t} else if (reinitRequired) {\n\t\t\tself.trigger('Destroy');\n\t\t\t\n\t\t\tinitControls.call(self, settings, function(inited) {\n\t\t\t\tif (inited) {\n\t\t\t\t\tself.runtime = o.Runtime.getInfo(getRUID()).type;\n\t\t\t\t\tself.trigger('Init', { runtime: self.runtime });\n\t\t\t\t\tself.trigger('PostInit');\n\t\t\t\t} else {\n\t\t\t\t\tself.trigger('Error', {\n\t\t\t\t\t\tcode : plupload.INIT_ERROR,\n\t\t\t\t\t\tmessage : plupload.translate('Init error.')\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\n\t// Internal event handlers\n\tfunction onFilesAdded(up, filteredFiles) {\n\t\t// Add files to queue\t\t\t\t\n\t\t[].push.apply(files, filteredFiles);\n\n\t\tup.trigger('QueueChanged');\n\t\tup.refresh();\n\t}\n\n\n\tfunction onBeforeUpload(up, file) {\n\t\t// Generate unique target filenames\n\t\tif (settings.unique_names) {\n\t\t\tvar matches = file.name.match(/\\.([^.]+)$/), ext = \"part\";\n\t\t\tif (matches) {\n\t\t\t\text = matches[1];\n\t\t\t}\n\t\t\tfile.target_name = file.id + '.' + ext;\n\t\t}\n\t}\n\n\n\tfunction onUploadFile(up, file) {\n\t\tvar url = up.settings.url\n\t\t, chunkSize = up.settings.chunk_size\n\t\t, retries = up.settings.max_retries\n\t\t, features = up.features\n\t\t, offset = 0\n\t\t, blob\n\t\t;\n\n\t\t// make sure we start at a predictable offset\n\t\tif (file.loaded) {\n\t\t\toffset = file.loaded = chunkSize * Math.floor(file.loaded / chunkSize);\n\t\t}\n\n\t\tfunction handleError() {\n\t\t\tif (retries-- > 0) {\n\t\t\t\tdelay(uploadNextChunk, 1000);\n\t\t\t} else {\n\t\t\t\tfile.loaded = offset; // reset all progress\n\n\t\t\t\tup.trigger('Error', {\n\t\t\t\t\tcode : plupload.HTTP_ERROR,\n\t\t\t\t\tmessage : plupload.translate('HTTP Error.'),\n\t\t\t\t\tfile : file,\n\t\t\t\t\tresponse : xhr.responseText,\n\t\t\t\t\tstatus : xhr.status,\n\t\t\t\t\tresponseHeaders: xhr.getAllResponseHeaders()\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadNextChunk() {\n\t\t\tvar chunkBlob, formData, args, curChunkSize;\n\n\t\t\t// File upload finished\n\t\t\tif (file.status == plupload.DONE || file.status == plupload.FAILED || up.state == plupload.STOPPED) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Standard arguments\n\t\t\targs = {name : file.target_name || file.name};\n\n\t\t\tif (chunkSize && features.chunks && blob.size > chunkSize) { // blob will be of type string if it was loaded in memory \n\t\t\t\tcurChunkSize = Math.min(chunkSize, blob.size - offset);\n\t\t\t\tchunkBlob = blob.slice(offset, offset + curChunkSize);\n\t\t\t} else {\n\t\t\t\tcurChunkSize = blob.size;\n\t\t\t\tchunkBlob = blob;\n\t\t\t}\n\n\t\t\t// If chunking is enabled add corresponding args, no matter if file is bigger than chunk or smaller\n\t\t\tif (chunkSize && features.chunks) {\n\t\t\t\t// Setup query string arguments\n\t\t\t\tif (up.settings.send_chunk_number) {\n\t\t\t\t\targs.chunk = Math.ceil(offset / chunkSize);\n\t\t\t\t\targs.chunks = Math.ceil(blob.size / chunkSize);\n\t\t\t\t} else { // keep support for experimental chunk format, just in case\n\t\t\t\t\targs.offset = offset;\n\t\t\t\t\targs.total = blob.size;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\txhr = new o.XMLHttpRequest();\n\n\t\t\t// Do we have upload progress support\n\t\t\tif (xhr.upload) {\n\t\t\t\txhr.upload.onprogress = function(e) {\n\t\t\t\t\tfile.loaded = Math.min(file.size, offset + e.loaded);\n\t\t\t\t\tup.trigger('UploadProgress', file);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\txhr.onload = function() {\n\t\t\t\t// check if upload made itself through\n\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\thandleError();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tretries = up.settings.max_retries; // reset the counter\n\n\t\t\t\t// Handle chunk response\n\t\t\t\tif (curChunkSize < blob.size) {\n\t\t\t\t\tchunkBlob.destroy();\n\n\t\t\t\t\toffset += curChunkSize;\n\t\t\t\t\tfile.loaded = Math.min(offset, blob.size);\n\n\t\t\t\t\tup.trigger('ChunkUploaded', file, {\n\t\t\t\t\t\toffset : file.loaded,\n\t\t\t\t\t\ttotal : blob.size,\n\t\t\t\t\t\tresponse : xhr.responseText,\n\t\t\t\t\t\tstatus : xhr.status,\n\t\t\t\t\t\tresponseHeaders: xhr.getAllResponseHeaders()\n\t\t\t\t\t});\n\n\t\t\t\t\t// stock Android browser doesn't fire upload progress events, but in chunking mode we can fake them\n\t\t\t\t\tif (o.Env.browser === 'Android Browser') {\n\t\t\t\t\t\t// doesn't harm in general, but is not required anywhere else\n\t\t\t\t\t\tup.trigger('UploadProgress', file);\n\t\t\t\t\t} \n\t\t\t\t} else {\n\t\t\t\t\tfile.loaded = file.size;\n\t\t\t\t}\n\n\t\t\t\tchunkBlob = formData = null; // Free memory\n\n\t\t\t\t// Check if file is uploaded\n\t\t\t\tif (!offset || offset >= blob.size) {\n\t\t\t\t\t// If file was modified, destory the copy\n\t\t\t\t\tif (file.size != file.origSize) {\n\t\t\t\t\t\tblob.destroy();\n\t\t\t\t\t\tblob = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tup.trigger('UploadProgress', file);\n\n\t\t\t\t\tfile.status = plupload.DONE;\n\n\t\t\t\t\tup.trigger('FileUploaded', file, {\n\t\t\t\t\t\tresponse : xhr.responseText,\n\t\t\t\t\t\tstatus : xhr.status,\n\t\t\t\t\t\tresponseHeaders: xhr.getAllResponseHeaders()\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Still chunks left\n\t\t\t\t\tdelay(uploadNextChunk, 1); // run detached, otherwise event handlers interfere\n\t\t\t\t}\n\t\t\t};\n\n\t\t\txhr.onerror = function() {\n\t\t\t\thandleError();\n\t\t\t};\n\n\t\t\txhr.onloadend = function() {\n\t\t\t\tthis.destroy();\n\t\t\t\txhr = null;\n\t\t\t};\n\n\t\t\t// Build multipart request\n\t\t\tif (up.settings.multipart && features.multipart) {\n\n\t\t\t\targs.name = file.target_name || file.name;\n\n\t\t\t\txhr.open(\"post\", url, true);\n\n\t\t\t\t// Set custom headers\n\t\t\t\tplupload.each(up.settings.headers, function(value, name) {\n\t\t\t\t\txhr.setRequestHeader(name, value);\n\t\t\t\t});\n\n\t\t\t\tformData = new o.FormData();\n\n\t\t\t\t// Add multipart params\n\t\t\t\tplupload.each(plupload.extend(args, up.settings.multipart_params), function(value, name) {\n\t\t\t\t\tformData.append(name, value);\n\t\t\t\t});\n\n\t\t\t\t// Add file and send it\n\t\t\t\tformData.append(up.settings.file_data_name, chunkBlob);\n\t\t\t\txhr.send(formData, {\n\t\t\t\t\truntime_order: up.settings.runtimes,\n\t\t\t\t\trequired_caps: up.settings.required_features,\n\t\t\t\t\tpreferred_caps: preferred_caps,\n\t\t\t\t\tswf_url: up.settings.flash_swf_url,\n\t\t\t\t\txap_url: up.settings.silverlight_xap_url\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// if no multipart, send as binary stream\n\t\t\t\turl = plupload.buildUrl(up.settings.url, plupload.extend(args, up.settings.multipart_params));\n\n\t\t\t\txhr.open(\"post\", url, true);\n\n\t\t\t\txhr.setRequestHeader('Content-Type', 'application/octet-stream'); // Binary stream header\n\n\t\t\t\t// Set custom headers\n\t\t\t\tplupload.each(up.settings.headers, function(value, name) {\n\t\t\t\t\txhr.setRequestHeader(name, value);\n\t\t\t\t});\n\n\t\t\t\txhr.send(chunkBlob, {\n\t\t\t\t\truntime_order: up.settings.runtimes,\n\t\t\t\t\trequired_caps: up.settings.required_features,\n\t\t\t\t\tpreferred_caps: preferred_caps,\n\t\t\t\t\tswf_url: up.settings.flash_swf_url,\n\t\t\t\t\txap_url: up.settings.silverlight_xap_url\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tblob = file.getSource();\n\n\t\t// Start uploading chunks\n\t\tif (up.settings.resize.enabled && runtimeCan(blob, 'send_binary_string') && !!~o.inArray(blob.type, ['image/jpeg', 'image/png'])) {\n\t\t\t// Resize if required\n\t\t\tresizeImage.call(this, blob, up.settings.resize, function(resizedBlob) {\n\t\t\t\tblob = resizedBlob;\n\t\t\t\tfile.size = resizedBlob.size;\n\t\t\t\tuploadNextChunk();\n\t\t\t});\n\t\t} else {\n\t\t\tuploadNextChunk();\n\t\t}\n\t}\n\n\n\tfunction onUploadProgress(up, file) {\n\t\tcalcFile(file);\n\t}\n\n\n\tfunction onStateChanged(up) {\n\t\tif (up.state == plupload.STARTED) {\n\t\t\t// Get start time to calculate bps\n\t\t\tstartTime = (+new Date());\n\t\t} else if (up.state == plupload.STOPPED) {\n\t\t\t// Reset currently uploading files\n\t\t\tfor (var i = up.files.length - 1; i >= 0; i--) {\n\t\t\t\tif (up.files[i].status == plupload.UPLOADING) {\n\t\t\t\t\tup.files[i].status = plupload.QUEUED;\n\t\t\t\t\tcalc();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction onCancelUpload() {\n\t\tif (xhr) {\n\t\t\txhr.abort();\n\t\t}\n\t}\n\n\n\tfunction onFileUploaded(up) {\n\t\tcalc();\n\n\t\t// Upload next file but detach it from the error event\n\t\t// since other custom listeners might want to stop the queue\n\t\tdelay(function() {\n\t\t\tuploadNext.call(up);\n\t\t}, 1);\n\t}\n\n\n\tfunction onError(up, err) {\n\t\t// Set failed status if an error occured on a file\n\t\tif (err.file) {\n\t\t\terr.file.status = plupload.FAILED;\n\t\t\tcalcFile(err.file);\n\n\t\t\t// Upload next file but detach it from the error event\n\t\t\t// since other custom listeners might want to stop the queue\n\t\t\tif (up.state == plupload.STARTED) { // upload in progress\n\t\t\t\tup.trigger('CancelUpload');\n\t\t\t\tdelay(function() {\n\t\t\t\t\tuploadNext.call(up);\n\t\t\t\t}, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction onDestroy(up) {\n\t\tup.stop();\n\n\t\t// Purge the queue\n\t\tplupload.each(files, function(file) {\n\t\t\tfile.destroy();\n\t\t});\n\t\tfiles = [];\n\n\t\tif (fileInputs.length) {\n\t\t\tplupload.each(fileInputs, function(fileInput) {\n\t\t\t\tfileInput.destroy();\n\t\t\t});\n\t\t\tfileInputs = [];\n\t\t}\n\n\t\tif (fileDrops.length) {\n\t\t\tplupload.each(fileDrops, function(fileDrop) {\n\t\t\t\tfileDrop.destroy();\n\t\t\t});\n\t\t\tfileDrops = [];\n\t\t}\n\n\t\tpreferred_caps = {};\n\t\tdisabled = false;\n\t\tstartTime = xhr = null;\n\t\ttotal.reset();\n\t}\n\n\n\t// Default settings\n\tsettings = {\n\t\truntimes: o.Runtime.order,\n\t\tmax_retries: 0,\n\t\tchunk_size: 0,\n\t\tmultipart: true,\n\t\tmulti_selection: true,\n\t\tfile_data_name: 'file',\n\t\tflash_swf_url: 'js/Moxie.swf',\n\t\tsilverlight_xap_url: 'js/Moxie.xap',\n\t\tfilters: {\n\t\t\tmime_types: [],\n\t\t\tprevent_duplicates: false,\n\t\t\tmax_file_size: 0\n\t\t},\n\t\tresize: {\n\t\t\tenabled: false,\n\t\t\tpreserve_headers: true,\n\t\t\tcrop: false\n\t\t},\n\t\tsend_chunk_number: true // whether to send chunks and chunk numbers, or total and offset bytes\n\t};\n\n\t\n\tsetOption.call(this, options, null, true);\n\n\t// Inital total state\n\ttotal = new plupload.QueueProgress(); \n\n\t// Add public methods\n\tplupload.extend(this, {\n\n\t\t/**\n\t\t * Unique id for the Uploader instance.\n\t\t *\n\t\t * @property id\n\t\t * @type String\n\t\t */\n\t\tid : uid,\n\t\tuid : uid, // mOxie uses this to differentiate between event targets\n\n\t\t/**\n\t\t * Current state of the total uploading progress. This one can either be plupload.STARTED or plupload.STOPPED.\n\t\t * These states are controlled by the stop/start methods. The default value is STOPPED.\n\t\t *\n\t\t * @property state\n\t\t * @type Number\n\t\t */\n\t\tstate : plupload.STOPPED,\n\n\t\t/**\n\t\t * Map of features that are available for the uploader runtime. Features will be filled\n\t\t * before the init event is called, these features can then be used to alter the UI for the end user.\n\t\t * Some of the current features that might be in this map is: dragdrop, chunks, jpgresize, pngresize.\n\t\t *\n\t\t * @property features\n\t\t * @type Object\n\t\t */\n\t\tfeatures : {},\n\n\t\t/**\n\t\t * Current runtime name.\n\t\t *\n\t\t * @property runtime\n\t\t * @type String\n\t\t */\n\t\truntime : null,\n\n\t\t/**\n\t\t * Current upload queue, an array of File instances.\n\t\t *\n\t\t * @property files\n\t\t * @type Array\n\t\t * @see plupload.File\n\t\t */\n\t\tfiles : files,\n\n\t\t/**\n\t\t * Object with name/value settings.\n\t\t *\n\t\t * @property settings\n\t\t * @type Object\n\t\t */\n\t\tsettings : settings,\n\n\t\t/**\n\t\t * Total progess information. How many files has been uploaded, total percent etc.\n\t\t *\n\t\t * @property total\n\t\t * @type plupload.QueueProgress\n\t\t */\n\t\ttotal : total,\n\n\n\t\t/**\n\t\t * Initializes the Uploader instance and adds internal event listeners.\n\t\t *\n\t\t * @method init\n\t\t */\n\t\tinit : function() {\n\t\t\tvar self = this;\n\n\t\t\tif (typeof(settings.preinit) == \"function\") {\n\t\t\t\tsettings.preinit(self);\n\t\t\t} else {\n\t\t\t\tplupload.each(settings.preinit, function(func, name) {\n\t\t\t\t\tself.bind(name, func);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Check for required options\n\t\t\tif (!settings.browse_button || !settings.url) {\n\t\t\t\tthis.trigger('Error', {\n\t\t\t\t\tcode : plupload.INIT_ERROR,\n\t\t\t\t\tmessage : plupload.translate('Init error.')\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbindEventListeners.call(this);\n\n\t\t\tinitControls.call(this, settings, function(inited) {\n\t\t\t\tif (typeof(settings.init) == \"function\") {\n\t\t\t\t\tsettings.init(self);\n\t\t\t\t} else {\n\t\t\t\t\tplupload.each(settings.init, function(func, name) {\n\t\t\t\t\t\tself.bind(name, func);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (inited) {\n\t\t\t\t\tself.runtime = o.Runtime.getInfo(getRUID()).type;\n\t\t\t\t\tself.trigger('Init', { runtime: self.runtime });\n\t\t\t\t\tself.trigger('PostInit');\n\t\t\t\t} else {\n\t\t\t\t\tself.trigger('Error', {\n\t\t\t\t\t\tcode : plupload.INIT_ERROR,\n\t\t\t\t\t\tmessage : plupload.translate('Init error.')\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Set the value for the specified option(s).\n\t\t *\n\t\t * @method setOption\n\t\t * @since 2.1\n\t\t * @param {String|Object} option Name of the option to change or the set of key/value pairs\n\t\t * @param {Mixed} [value] Value for the option (is ignored, if first argument is object)\n\t\t */\n\t\tsetOption: function(option, value) {\n\t\t\tsetOption.call(this, option, value, !this.runtime); // until runtime not set we do not need to reinitialize\n\t\t},\n\n\t\t/**\n\t\t * Get the value for the specified option or the whole configuration, if not specified.\n\t\t * \n\t\t * @method getOption\n\t\t * @since 2.1\n\t\t * @param {String} [option] Name of the option to get\n\t\t * @return {Mixed} Value for the option or the whole set\n\t\t */\n\t\tgetOption: function(option) {\n\t\t\tif (!option) {\n\t\t\t\treturn settings;\n\t\t\t}\n\t\t\treturn settings[option];\n\t\t},\n\n\t\t/**\n\t\t * Refreshes the upload instance by dispatching out a refresh event to all runtimes.\n\t\t * This would for example reposition flash/silverlight shims on the page.\n\t\t *\n\t\t * @method refresh\n\t\t */\n\t\trefresh : function() {\n\t\t\tif (fileInputs.length) {\n\t\t\t\tplupload.each(fileInputs, function(fileInput) {\n\t\t\t\t\tfileInput.trigger('Refresh');\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.trigger('Refresh');\n\t\t},\n\n\t\t/**\n\t\t * Starts uploading the queued files.\n\t\t *\n\t\t * @method start\n\t\t */\n\t\tstart : function() {\n\t\t\tif (this.state != plupload.STARTED) {\n\t\t\t\tthis.state = plupload.STARTED;\n\t\t\t\tthis.trigger('StateChanged');\n\n\t\t\t\tuploadNext.call(this);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Stops the upload of the queued files.\n\t\t *\n\t\t * @method stop\n\t\t */\n\t\tstop : function() {\n\t\t\tif (this.state != plupload.STOPPED) {\n\t\t\t\tthis.state = plupload.STOPPED;\n\t\t\t\tthis.trigger('StateChanged');\n\t\t\t\tthis.trigger('CancelUpload');\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Disables/enables browse button on request.\n\t\t *\n\t\t * @method disableBrowse\n\t\t * @param {Boolean} disable Whether to disable or enable (default: true)\n\t\t */\n\t\tdisableBrowse : function() {\n\t\t\tdisabled = arguments[0] !== undef ? arguments[0] : true;\n\n\t\t\tif (fileInputs.length) {\n\t\t\t\tplupload.each(fileInputs, function(fileInput) {\n\t\t\t\t\tfileInput.disable(disabled);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.trigger('DisableBrowse', disabled);\n\t\t},\n\n\t\t/**\n\t\t * Returns the specified file object by id.\n\t\t *\n\t\t * @method getFile\n\t\t * @param {String} id File id to look for.\n\t\t * @return {plupload.File} File object or undefined if it wasn't found;\n\t\t */\n\t\tgetFile : function(id) {\n\t\t\tvar i;\n\t\t\tfor (i = files.length - 1; i >= 0; i--) {\n\t\t\t\tif (files[i].id === id) {\n\t\t\t\t\treturn files[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Adds file to the queue programmatically. Can be native file, instance of Plupload.File,\n\t\t * instance of mOxie.File, input[type=\"file\"] element, or array of these. Fires FilesAdded, \n\t\t * if any files were added to the queue. Otherwise nothing happens.\n\t\t *\n\t\t * @method addFile\n\t\t * @since 2.0\n\t\t * @param {plupload.File|mOxie.File|File|Node|Array} file File or files to add to the queue.\n\t\t * @param {String} [fileName] If specified, will be used as a name for the file\n\t\t */\n\t\taddFile : function(file, fileName) {\n\t\t\tvar self = this\n\t\t\t, queue = [] \n\t\t\t, files = []\n\t\t\t, ruid\n\t\t\t;\n\n\t\t\tfunction filterFile(file, cb) {\n\t\t\t\tvar queue = [];\n\t\t\t\to.each(self.settings.filters, function(rule, name) {\n\t\t\t\t\tif (fileFilters[name]) {\n\t\t\t\t\t\tqueue.push(function(cb) {\n\t\t\t\t\t\t\tfileFilters[name].call(self, rule, file, function(res) {\n\t\t\t\t\t\t\t\tcb(!res);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\to.inSeries(queue, cb);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @method resolveFile\n\t\t\t * @private\n\t\t\t * @param {o.File|o.Blob|plupload.File|File|Blob|input[type=\"file\"]} file\n\t\t\t */\n\t\t\tfunction resolveFile(file) {\n\t\t\t\tvar type = o.typeOf(file);\n\n\t\t\t\t// o.File\n\t\t\t\tif (file instanceof o.File) { \n\t\t\t\t\tif (!file.ruid && !file.isDetached()) {\n\t\t\t\t\t\tif (!ruid) { // weird case\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfile.ruid = ruid;\n\t\t\t\t\t\tfile.connectRuntime(ruid);\n\t\t\t\t\t}\n\t\t\t\t\tresolveFile(new plupload.File(file));\n\t\t\t\t}\n\t\t\t\t// o.Blob \n\t\t\t\telse if (file instanceof o.Blob) {\n\t\t\t\t\tresolveFile(file.getSource());\n\t\t\t\t\tfile.destroy();\n\t\t\t\t} \n\t\t\t\t// plupload.File - final step for other branches\n\t\t\t\telse if (file instanceof plupload.File) {\n\t\t\t\t\tif (fileName) {\n\t\t\t\t\t\tfile.name = fileName;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tqueue.push(function(cb) {\n\t\t\t\t\t\t// run through the internal and user-defined filters, if any\n\t\t\t\t\t\tfilterFile(file, function(err) {\n\t\t\t\t\t\t\tif (!err) {\n\t\t\t\t\t\t\t\tfiles.push(file);\n\t\t\t\t\t\t\t\tself.trigger(\"FileFiltered\", file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelay(cb, 1); // do not build up recursions or eventually we might hit the limits\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} \n\t\t\t\t// native File or blob\n\t\t\t\telse if (o.inArray(type, ['file', 'blob']) !== -1) {\n\t\t\t\t\tresolveFile(new o.File(null, file));\n\t\t\t\t} \n\t\t\t\t// input[type=\"file\"]\n\t\t\t\telse if (type === 'node' && o.typeOf(file.files) === 'filelist') {\n\t\t\t\t\t// if we are dealing with input[type=\"file\"]\n\t\t\t\t\to.each(file.files, resolveFile);\n\t\t\t\t} \n\t\t\t\t// mixed array of any supported types (see above)\n\t\t\t\telse if (type === 'array') {\n\t\t\t\t\tfileName = null; // should never happen, but unset anyway to avoid funny situations\n\t\t\t\t\to.each(file, resolveFile);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\truid = getRUID();\n\t\t\t\n\t\t\tresolveFile(file);\n\n\t\t\tif (queue.length) {\n\t\t\t\to.inSeries(queue, function() {\n\t\t\t\t\t// if any files left after filtration, trigger FilesAdded\n\t\t\t\t\tif (files.length) {\n\t\t\t\t\t\tself.trigger(\"FilesAdded\", files);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Removes a specific file.\n\t\t *\n\t\t * @method removeFile\n\t\t * @param {plupload.File|String} file File to remove from queue.\n\t\t */\n\t\tremoveFile : function(file) {\n\t\t\tvar id = typeof(file) === 'string' ? file : file.id;\n\n\t\t\tfor (var i = files.length - 1; i >= 0; i--) {\n\t\t\t\tif (files[i].id === id) {\n\t\t\t\t\treturn this.splice(i, 1)[0];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Removes part of the queue and returns the files removed. This will also trigger the FilesRemoved and QueueChanged events.\n\t\t *\n\t\t * @method splice\n\t\t * @param {Number} start (Optional) Start index to remove from.\n\t\t * @param {Number} length (Optional) Lengh of items to remove.\n\t\t * @return {Array} Array of files that was removed.\n\t\t */\n\t\tsplice : function(start, length) {\n\t\t\t// Splice and trigger events\n\t\t\tvar removed = files.splice(start === undef ? 0 : start, length === undef ? files.length : length);\n\n\t\t\t// if upload is in progress we need to stop it and restart after files are removed\n\t\t\tvar restartRequired = false;\n\t\t\tif (this.state == plupload.STARTED) { // upload in progress\n\t\t\t\trestartRequired = true;\n\t\t\t\tthis.stop();\n\t\t\t}\n\n\t\t\tthis.trigger(\"FilesRemoved\", removed);\n\n\t\t\t// Dispose any resources allocated by those files\n\t\t\tplupload.each(removed, function(file) {\n\t\t\t\tfile.destroy();\n\t\t\t});\n\n\t\t\tthis.trigger(\"QueueChanged\");\n\t\t\tthis.refresh();\n\n\t\t\tif (restartRequired) {\n\t\t\t\tthis.start();\n\t\t\t}\n\n\t\t\treturn removed;\n\t\t},\n\n\t\t/**\n\t\t * Dispatches the specified event name and it's arguments to all listeners.\n\t\t *\n\t\t *\n\t\t * @method trigger\n\t\t * @param {String} name Event name to fire.\n\t\t * @param {Object..} Multiple arguments to pass along to the listener functions.\n\t\t */\n\n\t\t/**\n\t\t * Check whether uploader has any listeners to the specified event.\n\t\t *\n\t\t * @method hasEventListener\n\t\t * @param {String} name Event name to check for.\n\t\t */\n\n\n\t\t/**\n\t\t * Adds an event listener by name.\n\t\t *\n\t\t * @method bind\n\t\t * @param {String} name Event name to listen for.\n\t\t * @param {function} func Function to call ones the event gets fired.\n\t\t * @param {Object} scope Optional scope to execute the specified function in.\n\t\t */\n\t\tbind : function(name, func, scope) {\n\t\t\tvar self = this;\n\t\t\t// adapt moxie EventTarget style to Plupload-like\n\t\t\tplupload.Uploader.prototype.bind.call(this, name, function() {\n\t\t\t\tvar args = [].slice.call(arguments);\n\t\t\t\targs.splice(0, 1, self); // replace event object with uploader instance\n\t\t\t\treturn func.apply(this, args);\n\t\t\t}, 0, scope);\n\t\t},\n\n\t\t/**\n\t\t * Removes the specified event listener.\n\t\t *\n\t\t * @method unbind\n\t\t * @param {String} name Name of event to remove.\n\t\t * @param {function} func Function to remove from listener.\n\t\t */\n\n\t\t/**\n\t\t * Removes all event listeners.\n\t\t *\n\t\t * @method unbindAll\n\t\t */\n\n\n\t\t/**\n\t\t * Destroys Plupload instance and cleans after itself.\n\t\t *\n\t\t * @method destroy\n\t\t */\n\t\tdestroy : function() {\n\t\t\tthis.trigger('Destroy');\n\t\t\tsettings = total = null; // purge these exclusively\n\t\t\tthis.unbindAll();\n\t\t}\n\t});\n};\n\nplupload.Uploader.prototype = o.EventTarget.instance;\n\n/**\n * Constructs a new file instance.\n *\n * @class File\n * @constructor\n * \n * @param {Object} file Object containing file properties\n * @param {String} file.name Name of the file.\n * @param {Number} file.size File size.\n */\nplupload.File = (function() {\n\tvar filepool = {};\n\n\tfunction PluploadFile(file) {\n\n\t\tplupload.extend(this, {\n\n\t\t\t/**\n\t\t\t * File id this is a globally unique id for the specific file.\n\t\t\t *\n\t\t\t * @property id\n\t\t\t * @type String\n\t\t\t */\n\t\t\tid: plupload.guid(),\n\n\t\t\t/**\n\t\t\t * File name for example \"myfile.gif\".\n\t\t\t *\n\t\t\t * @property name\n\t\t\t * @type String\n\t\t\t */\n\t\t\tname: file.name || file.fileName,\n\n\t\t\t/**\n\t\t\t * File type, `e.g image/jpeg`\n\t\t\t *\n\t\t\t * @property type\n\t\t\t * @type String\n\t\t\t */\n\t\t\ttype: file.type || '',\n\n\t\t\t/**\n\t\t\t * File size in bytes (may change after client-side manupilation).\n\t\t\t *\n\t\t\t * @property size\n\t\t\t * @type Number\n\t\t\t */\n\t\t\tsize: file.size || file.fileSize,\n\n\t\t\t/**\n\t\t\t * Original file size in bytes.\n\t\t\t *\n\t\t\t * @property origSize\n\t\t\t * @type Number\n\t\t\t */\n\t\t\torigSize: file.size || file.fileSize,\n\n\t\t\t/**\n\t\t\t * Number of bytes uploaded of the files total size.\n\t\t\t *\n\t\t\t * @property loaded\n\t\t\t * @type Number\n\t\t\t */\n\t\t\tloaded: 0,\n\n\t\t\t/**\n\t\t\t * Number of percentage uploaded of the file.\n\t\t\t *\n\t\t\t * @property percent\n\t\t\t * @type Number\n\t\t\t */\n\t\t\tpercent: 0,\n\n\t\t\t/**\n\t\t\t * Status constant matching the plupload states QUEUED, UPLOADING, FAILED, DONE.\n\t\t\t *\n\t\t\t * @property status\n\t\t\t * @type Number\n\t\t\t * @see plupload\n\t\t\t */\n\t\t\tstatus: plupload.QUEUED,\n\n\t\t\t/**\n\t\t\t * Date of last modification.\n\t\t\t *\n\t\t\t * @property lastModifiedDate\n\t\t\t * @type {String}\n\t\t\t */\n\t\t\tlastModifiedDate: file.lastModifiedDate || (new Date()).toLocaleString(), // Thu Aug 23 2012 19:40:00 GMT+0400 (GET)\n\n\t\t\t/**\n\t\t\t * Returns native window.File object, when it's available.\n\t\t\t *\n\t\t\t * @method getNative\n\t\t\t * @return {window.File} or null, if plupload.File is of different origin\n\t\t\t */\n\t\t\tgetNative: function() {\n\t\t\t\tvar file = this.getSource().getSource();\n\t\t\t\treturn o.inArray(o.typeOf(file), ['blob', 'file']) !== -1 ? file : null;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns mOxie.File - unified wrapper object that can be used across runtimes.\n\t\t\t *\n\t\t\t * @method getSource\n\t\t\t * @return {mOxie.File} or null\n\t\t\t */\n\t\t\tgetSource: function() {\n\t\t\t\tif (!filepool[this.id]) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn filepool[this.id];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Destroys plupload.File object.\n\t\t\t *\n\t\t\t * @method destroy\n\t\t\t */\n\t\t\tdestroy: function() {\n\t\t\t\tvar src = this.getSource();\n\t\t\t\tif (src) {\n\t\t\t\t\tsrc.destroy();\n\t\t\t\t\tdelete filepool[this.id];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tfilepool[this.id] = file;\n\t}\n\n\treturn PluploadFile;\n}());\n\n\n/**\n * Constructs a queue progress.\n *\n * @class QueueProgress\n * @constructor\n */\n plupload.QueueProgress = function() {\n\tvar self = this; // Setup alias for self to reduce code size when it's compressed\n\n\t/**\n\t * Total queue file size.\n\t *\n\t * @property size\n\t * @type Number\n\t */\n\tself.size = 0;\n\n\t/**\n\t * Total bytes uploaded.\n\t *\n\t * @property loaded\n\t * @type Number\n\t */\n\tself.loaded = 0;\n\n\t/**\n\t * Number of files uploaded.\n\t *\n\t * @property uploaded\n\t * @type Number\n\t */\n\tself.uploaded = 0;\n\n\t/**\n\t * Number of files failed to upload.\n\t *\n\t * @property failed\n\t * @type Number\n\t */\n\tself.failed = 0;\n\n\t/**\n\t * Number of files yet to be uploaded.\n\t *\n\t * @property queued\n\t * @type Number\n\t */\n\tself.queued = 0;\n\n\t/**\n\t * Total percent of the uploaded bytes.\n\t *\n\t * @property percent\n\t * @type Number\n\t */\n\tself.percent = 0;\n\n\t/**\n\t * Bytes uploaded per second.\n\t *\n\t * @property bytesPerSec\n\t * @type Number\n\t */\n\tself.bytesPerSec = 0;\n\n\t/**\n\t * Resets the progress to it's initial values.\n\t *\n\t * @method reset\n\t */\n\tself.reset = function() {\n\t\tself.size = self.loaded = self.uploaded = self.failed = self.queued = self.percent = self.bytesPerSec = 0;\n\t};\n};\n\nwindow.plupload = plupload;\n\n}(window, mOxie));\n"]}